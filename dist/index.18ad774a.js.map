{"mappings":"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","sources":["<anon>","script.js","model.js","helper.js"],"sourcesContent":["const $ddb5346071cde49e$export$2b3ff41fecbef7c8 = async function(url, errMsg) {\n    try {\n        const res = await fetch(url);\n        const data = await res.json();\n        if (!res.ok) throw new Error(errMsg);\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\n\nconst $b5393ef87a412903$export$70bb7035b2fbdd40 = async function(workout) {\n    try {\n        const [lat, lng] = workout.coords;\n        const data = await (0, $ddb5346071cde49e$export$2b3ff41fecbef7c8)(`https://geocode.xyz/${lat},${lng}?geoit=json`, \"Please try to reload the page again. Unfortunately, this api what I am using now can not read all datas at once and I am not willing to pay for the API. Error occurs from this reason.\");\n        // console.log(data.osmtags);\n        return data.osmtags.name;\n    } catch (err) {\n        console.error(err);\n        return \"\";\n    }\n};\nconst $b5393ef87a412903$export$ed33a38a78fb6b2b = async function(workout) {\n    try {\n        const myKey = \"5c04291f0b2520cd23ea484f5b1e34e2\";\n        const [lat, lng] = workout.coords;\n        const data = await (0, $ddb5346071cde49e$export$2b3ff41fecbef7c8)(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${myKey}`, \"Failed to load data from API\");\n        const { icon: icon } = data.weather[0];\n        return `https://openweathermap.org/img/wn/${icon}@2x.png`;\n    } catch (err) {\n        console.error(err);\n        return \"\";\n    }\n};\n\n\n\"use strict\";\nconst $c1ce9d969bfa6909$var$form = document.querySelector(\".form\");\nconst $c1ce9d969bfa6909$var$containerWorkouts = document.querySelector(\".workouts\");\nconst $c1ce9d969bfa6909$var$inputType = document.querySelector(\".form__input--type\");\nconst $c1ce9d969bfa6909$var$inputDistance = document.querySelector(\".form__input--distance\");\nconst $c1ce9d969bfa6909$var$inputDuration = document.querySelector(\".form__input--duration\");\nconst $c1ce9d969bfa6909$var$inputCadence = document.querySelector(\".form__input--cadence\");\nconst $c1ce9d969bfa6909$var$inputElevation = document.querySelector(\".form__input--elevation\");\nconst $c1ce9d969bfa6909$var$sortDivider = document.querySelector(\".sort__devider\");\nconst $c1ce9d969bfa6909$var$showSortBtns = document.querySelector(\".show__sort__btns\");\nconst $c1ce9d969bfa6909$var$validationMsg = document.querySelector(\".validation__msg\");\nconst $c1ce9d969bfa6909$var$clearAllBtn = document.querySelector(\".clr__all__btn\");\nconst $c1ce9d969bfa6909$var$overviewBtn = document.querySelector(\".overview__btn\");\nconst $c1ce9d969bfa6909$var$confMsg = document.querySelector(\".confirmation__msg\");\nconst $c1ce9d969bfa6909$var$yesBtn = document.querySelector(\".yes__button\");\nconst $c1ce9d969bfa6909$var$noBtn = document.querySelector(\".no__button\");\nconst $c1ce9d969bfa6909$var$sortContainer = document.querySelector(\".sort__buttons__container\");\nclass $c1ce9d969bfa6909$var$Workout {\n    id = Math.random() + \"\";\n    constructor(coords, distance, duration, date){\n        this.coords = coords; // [lat,lng]\n        this.distance = distance; //in km\n        this.duration = duration; // in min\n        this.date = date;\n    }\n    _setDescription() {\n        const months = [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\"\n        ];\n        const date = new Date(this.date); // convert date string stored in miliseconds to object so to extract month and day\n        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[date.getMonth()]}-${date.getDate()}-${date.getFullYear() % 100}`;\n    }\n}\nclass $c1ce9d969bfa6909$var$Running extends $c1ce9d969bfa6909$var$Workout {\n    type = \"running\";\n    constructor(coords, distance, duration, date, cadence){\n        super(coords, distance, duration, date);\n        this.cadence = cadence;\n        this.calcPace();\n        this._setDescription();\n    }\n    calcPace() {\n        // min/km\n        this.pace = this.duration / this.distance;\n        return this.pace;\n    }\n}\nclass $c1ce9d969bfa6909$var$Cycling extends $c1ce9d969bfa6909$var$Workout {\n    type = \"cycling\";\n    constructor(coords, distance, duration, date, elevationGain){\n        super(coords, distance, duration, date);\n        this.elevationGain = elevationGain;\n        this.calcSpeed();\n        this._setDescription();\n    }\n    calcSpeed() {\n        //km/h\n        this.speed = this.distance / (this.duration / 60);\n    }\n}\n/////////////////////////////////////////////////////////////////\n// APP ARCHITECTURE\nclass $c1ce9d969bfa6909$var$App {\n    #map;\n    #mapEvent;\n    #workouts = [];\n    #markers = [];\n    constructor(){\n        this._getPosition();\n        $c1ce9d969bfa6909$var$form.addEventListener(\"submit\", this._newWorkout.bind(this));\n        $c1ce9d969bfa6909$var$inputType.addEventListener(\"change\", this._toggleElevationField);\n        //listener for remove button and set in to view (click event)\n        $c1ce9d969bfa6909$var$containerWorkouts.addEventListener(\"click\", this._handleWorkoutClick.bind(this));\n        //listener for input changes (user edits) - change event\n        $c1ce9d969bfa6909$var$containerWorkouts.addEventListener(\"change\", this._updateWorkoutInfo.bind(this));\n        this._checkStorageAndLoad();\n        $c1ce9d969bfa6909$var$showSortBtns.addEventListener(\"click\", this._toggleSortBtns.bind(this));\n        //sort event listener\n        $c1ce9d969bfa6909$var$sortContainer.addEventListener(\"click\", this._sortAndRender.bind(this));\n        //clear workouts listeners\n        $c1ce9d969bfa6909$var$clearAllBtn.addEventListener(\"click\", this._showDeleteMsg);\n        $c1ce9d969bfa6909$var$yesBtn.addEventListener(\"click\", this._clearAll);\n        $c1ce9d969bfa6909$var$noBtn.addEventListener(\"click\", function() {\n            $c1ce9d969bfa6909$var$confMsg.classList.add(\"msg__hidden\");\n        });\n    }\n    _handleWorkoutClick(e) {\n        // find info about workout that was clicked\n        const [id, foundWorkout, workoutIndex, element] = this._getId(e);\n        // if no info, return\n        if (!id) return;\n        // 2. if remove__btn is clicked then remove item\n        if (e.target.classList.contains(\"remove__btn\")) {\n            this._removeWorkout(element, workoutIndex);\n            // 4. update local storage\n            this._saveWorkouts();\n            return;\n        }\n        // 3. if an input field was clicked do nothing\n        if (e.target.classList.contains(\"workout__value\")) return;\n        // 4. otherwise center item on map\n        this._setIntoView(foundWorkout);\n    }\n    _sortAndRender(e) {\n        const element = e.target.closest(\".sort__button\");\n        let currentDirection = \"descending\"; //default\n        if (!element) return;\n        const arrow = element.querySelector(\".arrow\");\n        const type = element.dataset.type;\n        // set all arrows to default state (down)\n        $c1ce9d969bfa6909$var$sortContainer.querySelectorAll(\".arrow\").forEach((e)=>e.classList.remove(\"arrow__up\"));\n        // get which direction to sort\n        const typeValues = this.#workouts.map((workout)=>{\n            return workout[type];\n        });\n        const sortedAscending = typeValues.slice().sort(function(a, b) {\n            return a - b;\n        }).join(\"\");\n        const sortedDescending = typeValues.slice().sort(function(a, b) {\n            return b - a;\n        }).join(\"\");\n        // compare sortedAscending array with values from #workout array to check how are they sorted\n        // 1. case 1 ascending\n        if (typeValues.join(\"\") === sortedAscending) {\n            currentDirection = \"ascending\";\n            arrow.classList.add(\"arrow__up\");\n        }\n        // 2. case 2 descending\n        if (typeValues.join(\"\") === sortedDescending) {\n            currentDirection = \"descending\";\n            arrow.classList.remove(\"arrow__up\");\n        }\n        // sort main workouts array\n        this._sortArray(this.#workouts, currentDirection, type);\n        ///////// RE-RENDER ////////\n        // clear rendered workouts from DOM\n        $c1ce9d969bfa6909$var$containerWorkouts.querySelectorAll(\".workout\").forEach((workout)=>workout.remove());\n        // clear workouts from map(to prevent bug in array order when deleting a single workout)\n        this.#markers.forEach((marker)=>marker.remove());\n        //clear array\n        this.#markers = [];\n        // render list all again sorted\n        this.#workouts.forEach((workout)=>{\n            this._renderWorkout(workout, $b5393ef87a412903$export$70bb7035b2fbdd40(workout), $b5393ef87a412903$export$ed33a38a78fb6b2b(workout));\n            // create new markers and render them on map\n            this._renderWorkoutMarker(workout);\n        });\n        // center map on the last item in array (this will be 1st workout on the list in the UI)\n        const lastWorkout = this.#workouts[this.#workouts.length - 1];\n        this._setIntoView(lastWorkout);\n    }\n    _sortArray(array, currentDirection, type) {\n        // sort opposite to the currentDirection\n        if (currentDirection === \"ascending\") array.sort(function(a, b) {\n            return b[type] - a[type];\n        });\n        if (currentDirection === \"descending\") array.sort(function(a, b) {\n            return a[type] - b[type];\n        });\n    }\n    _toggleSortBtns() {\n        $c1ce9d969bfa6909$var$sortContainer.classList.toggle(\"zero__height\");\n    }\n    _showDeleteMsg() {\n        $c1ce9d969bfa6909$var$confMsg.classList.remove(\"msg__hidden\");\n    }\n    _checkStorageAndLoad() {\n        const workouts = localStorage.getItem(\"workouts\");\n        if (!workouts) return;\n        // Rebuild objects based on storage\n        const tempWorkouts = JSON.parse(workouts);\n        tempWorkouts.forEach((workout)=>{\n            const typeOfWorkout = workout.type;\n            let newWorkout;\n            // create workout object\n            if (typeOfWorkout === \"running\") newWorkout = new $c1ce9d969bfa6909$var$Running(workout.coords, workout.distance, workout.duration, workout.date, workout.cadence);\n            if (typeOfWorkout === \"cycling\") newWorkout = new $c1ce9d969bfa6909$var$Cycling(workout.coords, workout.distance, workout.duration, workout.date, workout.elevationGain);\n            //push the created workout object in the array\n            this.#workouts.push(newWorkout);\n        });\n        //Once all objects are created and stored in array #workouts\n        // render workouts in a list\n        this.#workouts.forEach((workout)=>this._renderWorkout(workout, $b5393ef87a412903$export$70bb7035b2fbdd40(workout), $b5393ef87a412903$export$ed33a38a78fb6b2b(workout)));\n    // map markers will load after map is loaded\n    }\n    _saveWorkouts() {\n        const workoutString = JSON.stringify(this.#workouts);\n        window.localStorage.setItem(\"workouts\", workoutString);\n    }\n    _getPosition() {\n        if (navigator.geolocation) navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), function() {\n            alert(\"Could not get your position\");\n        });\n    }\n    _loadMap(position) {\n        const { latitude: latitude, longitude: longitude } = position.coords;\n        const myCoordinates = [\n            latitude,\n            longitude\n        ];\n        this.#map = L.map(\"map\").setView(myCoordinates, 13);\n        L.tileLayer(\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\", {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(this.#map);\n        //show form when clicking on map\n        this.#map.on(\"click\", this._showForm.bind(this));\n        // google tile\n        // http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\n        // original tile\n        // https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\n        if (!this.#workouts) return;\n        this.#workouts.forEach((workout)=>this._renderWorkoutMarker(workout));\n        // overview button listener\n        $c1ce9d969bfa6909$var$overviewBtn.addEventListener(\"click\", this._overview.bind(this));\n    }\n    _showForm(mapE) {\n        //exporting mapevent to private variable so we can use it outside  event listener\n        this.#mapEvent = mapE;\n        $c1ce9d969bfa6909$var$form.classList.remove(\"hidden\");\n        $c1ce9d969bfa6909$var$inputDistance.focus();\n    }\n    _clearInputFields() {\n        $c1ce9d969bfa6909$var$inputDistance.value = $c1ce9d969bfa6909$var$inputDuration.value = $c1ce9d969bfa6909$var$inputCadence.value = $c1ce9d969bfa6909$var$inputElevation.value = \"\";\n    }\n    _hideForm() {\n        this._clearInputFields();\n        $c1ce9d969bfa6909$var$form.style.display = \"none\";\n        $c1ce9d969bfa6909$var$form.classList.add(\"hidden\");\n        setTimeout(()=>{\n            $c1ce9d969bfa6909$var$form.style.display = \"grid\";\n        }, 1000);\n    }\n    _toggleElevationField() {\n        $c1ce9d969bfa6909$var$inputElevation.closest(\".form__row\").classList.toggle(\"form__row--hidden\");\n        $c1ce9d969bfa6909$var$inputCadence.closest(\".form__row\").classList.toggle(\"form__row--hidden\");\n    }\n    _newWorkout(e) {\n        ///////// HELPER FUNCTIONS\n        // check if type is number\n        const validInputs = (...inputs)=>inputs.every((inp)=>Number.isFinite(inp));\n        // check if number is positive\n        const allPositive = (...inputs)=>inputs.every((inp)=>inp > 0);\n        // function to display msg if inputs don't pass validation\n        const display = function() {\n            //display and hide msg after 3 sec\n            $c1ce9d969bfa6909$var$validationMsg.classList.add(\"msg__show\");\n            setTimeout(()=>{\n                $c1ce9d969bfa6909$var$validationMsg.classList.remove(\"msg__show\");\n            }, 3000);\n            //clear fields\n            this._clearInputFields();\n        };\n        const displayValidationMsg = display.bind(this);\n        e.preventDefault();\n        // Get data from form\n        const type = $c1ce9d969bfa6909$var$inputType.value;\n        const distance = +$c1ce9d969bfa6909$var$inputDistance.value; //converting to number with +\n        const duration = +$c1ce9d969bfa6909$var$inputDuration.value; //converting to number with +\n        const { lat: lat, lng: lng } = this.#mapEvent.latlng;\n        let workout;\n        const date = Date.now(); // number in miliseconds. This way we can easily restore date object later(when it converts back from JSON upon storage load) and use its methods\n        // If workout is running create running object\n        if (type === \"running\") {\n            const cadence = +$c1ce9d969bfa6909$var$inputCadence.value;\n            // Check if data is valid\n            if (!validInputs(distance, duration, cadence) || !allPositive(distance, duration, cadence)) return displayValidationMsg();\n            workout = new $c1ce9d969bfa6909$var$Running([\n                lat,\n                lng\n            ], distance, duration, date, cadence);\n        }\n        // If workout is cycling create cycling object\n        if (type === \"cycling\") {\n            const elevation = +$c1ce9d969bfa6909$var$inputElevation.value;\n            // Check if data is valid\n            if (!validInputs(distance, duration, elevation) || !allPositive(distance, duration)) return displayValidationMsg();\n            // create new workout object\n            workout = new $c1ce9d969bfa6909$var$Cycling([\n                lat,\n                lng\n            ], distance, duration, date, elevation);\n        }\n        this._renderWorkoutMarker(workout);\n        // Add workout object to workout array\n        this.#workouts.push(workout);\n        // Render workout\n        this._renderWorkout(workout, $b5393ef87a412903$export$70bb7035b2fbdd40(workout), $b5393ef87a412903$export$ed33a38a78fb6b2b(workout));\n        //hide form\n        this._hideForm();\n    }\n    _renderWorkoutMarker(workout) {\n        // custom icon\n        // const maptyIcon = L.icon({\n        //   iconUrl: 'icon.png',\n        //   iconSize: [50, 55],\n        //   iconAnchor: [24, 3],\n        // });\n        // create marker\n        const layer = L.marker(workout.coords).addTo(this.#map).bindPopup(L.popup({\n            maxWidth: 250,\n            minWidth: 100,\n            autoClose: false,\n            closeOnClick: false,\n            className: `${workout.type}-popup`\n        })).setPopupContent(`${workout.type === \"running\" ? \"\\uD83C\\uDFC3‍♂️\" : \"\\uD83D\\uDEB4‍♀️\"} ${workout.description}`).openPopup();\n        // put the marker inside markers array\n        this.#markers.push(layer);\n    }\n    async _renderWorkout(workout, geoData, weatherData) {\n        const geo = await geoData;\n        const weather = await weatherData;\n        let html = `\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n    <h2 class=\"workout__title\">${workout.description}${geo ? \",\" : \"\"}\n    ${geo ?? \"\"} <img class=\"workout__weather\" src=\"${weather}\"/>\n    </h2>\n    <div class=\"workout__details\">\n          <span class=\"workout__icon\">${workout.type === \"running\" ? \"\\uD83C\\uDFC3‍♂️\" : \"\\uD83D\\uDEB4‍♀️\"}</span>\n          <input class=\"workout__value\" value=\"${workout.distance}\" data-type=\"distance\" required size=\"1\">\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⏱</span>\n          <input class=\"workout__value\" value=\"${workout.duration}\" data-type=\"duration\" required size=\"1\">\n          <span class=\"workout__unit\">min</span>\n        </div>`;\n        if (workout.type === \"running\") html += ` \n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">⚡️</span>\n            <input class=\"workout__value\" value=\"${workout.pace.toFixed(1)}\" data-type=\"pace\" disabled required size=\"1\">\n            <span class=\"workout__unit\">min/km</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">🦶🏼</span>\n            <input class=\"workout__value\" value=\"${workout.cadence}\" data-type=\"cadence\" required size=\"1\">\n            <span class=\"workout__unit\">spm</span>\n          </div>\n          <button class=\"remove__btn\">×</button>\n        </li>`;\n        if (workout.type === \"cycling\") html += `\n            <div class=\"workout__details\">\n            <span class=\"workout__icon\">⚡️</span>\n            <input class=\"workout__value\" value=\"${workout.speed.toFixed(1)}\" data-type=\"speed\" disabled required size=\"2\">\n            <span class=\"workout__unit\">km/h</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">⛰</span>\n            <input class=\"workout__value\" value=\"${workout.elevationGain}\" data-type=\"elevationGain\" required size=\"2\">\n            <span class=\"workout__unit\">m</span>\n          </div>\n          <button class=\"remove__btn\">×</button>\n        </li>`;\n        $c1ce9d969bfa6909$var$sortDivider.insertAdjacentHTML(\"afterend\", html);\n        // save workouts in local storage\n        this._saveWorkouts();\n    }\n    _removeWorkout(element, workoutIndex) {\n        // 1. remove from list\n        element.remove();\n        // 2. remove from array\n        this.#workouts.splice(workoutIndex, 1);\n        // 3. remove from map\n        this.#markers[workoutIndex].remove();\n        // 4. remove from marker array\n        this.#markers.splice(workoutIndex, 1);\n    }\n    _clearAll() {\n        localStorage.clear();\n        location.reload();\n        $c1ce9d969bfa6909$var$confMsg.classList.add(\"msg__hidden\");\n    }\n    _getId(e) {\n        // detect workout element on click\n        const element = e.target.closest(\".workout\");\n        if (element) {\n            // get info about the workout that was clicked on\n            const id = element.dataset.id;\n            const foundWorkout = this.#workouts.find((elem)=>elem.id === id);\n            const workoutIndex = this.#workouts.indexOf(foundWorkout);\n            return [\n                id,\n                foundWorkout,\n                workoutIndex,\n                element\n            ];\n        }\n        return [];\n    }\n    _updateWorkoutInfo(e) {\n        // find info about workout that was clicked\n        const [id, foundWorkout, _, element] = this._getId(e);\n        // if no info, return\n        if (!id) return;\n        // get type of input and value\n        const typeOfInput = e.target.dataset.type;\n        const newInputValue = +e.target.value;\n        let type;\n        // update workout object with the new value from the input field\n        foundWorkout[typeOfInput] = newInputValue;\n        // recalculate pace or speed\n        if (foundWorkout.type === \"running\") {\n            foundWorkout.calcPace();\n            type = \"pace\";\n        }\n        if (foundWorkout.type === \"cycling\") {\n            foundWorkout.calcSpeed();\n            type = \"speed\";\n        }\n        //update calculation in UI in the appropriate input field\n        element.querySelector(`input[data-type =\"${type}\"`).value = foundWorkout[type].toFixed(1);\n        // save in local storage (update)\n        this._saveWorkouts();\n    }\n    _setIntoView(foundWorkout) {\n        this.#map.setView(foundWorkout.coords, 13);\n    }\n    _overview() {\n        // if there are no workouts return\n        if (this.#workouts.length === 0) return;\n        // find lowest and highest lat and long to make map bounds that fit all markers\n        const latitudes = this.#workouts.map((w)=>{\n            return w.coords[0];\n        });\n        const longitudes = this.#workouts.map((w)=>{\n            return w.coords[1];\n        });\n        const minLat = Math.min(...latitudes);\n        const maxLat = Math.max(...latitudes);\n        const minLong = Math.min(...longitudes);\n        const maxLong = Math.max(...longitudes);\n        // fit bounds with coordinates\n        this.#map.fitBounds([\n            [\n                maxLat,\n                minLong\n            ],\n            [\n                minLat,\n                maxLong\n            ]\n        ], {\n            padding: [\n                70,\n                70\n            ]\n        });\n    }\n}\nconst $c1ce9d969bfa6909$var$app = new $c1ce9d969bfa6909$var$App(); // check validation message\n\n\n//# sourceMappingURL=index.18ad774a.js.map\n","'use strict';\nimport * as model from './model.js';\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\nconst sortDivider = document.querySelector('.sort__devider');\nconst showSortBtns = document.querySelector('.show__sort__btns');\nconst validationMsg = document.querySelector('.validation__msg');\nconst clearAllBtn = document.querySelector('.clr__all__btn');\nconst overviewBtn = document.querySelector('.overview__btn');\nconst confMsg = document.querySelector('.confirmation__msg');\nconst yesBtn = document.querySelector('.yes__button');\nconst noBtn = document.querySelector('.no__button');\nconst sortContainer = document.querySelector('.sort__buttons__container');\n\nclass Workout {\n  id = Math.random() + '';\n  constructor(coords, distance, duration, date) {\n    this.coords = coords; // [lat,lng]\n    this.distance = distance; //in km\n    this.duration = duration; // in min\n    this.date = date;\n  }\n\n  _setDescription() {\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n    const date = new Date(this.date); // convert date string stored in miliseconds to object so to extract month and day\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[date.getMonth()]\n    }-${date.getDate()}-${date.getFullYear() % 100}`;\n  }\n}\n\nclass Running extends Workout {\n  type = 'running';\n  constructor(coords, distance, duration, date, cadence) {\n    super(coords, distance, duration, date);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    // min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n  constructor(coords, distance, duration, date, elevationGain) {\n    super(coords, distance, duration, date);\n    this.elevationGain = elevationGain;\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    //km/h\n    this.speed = this.distance / (this.duration / 60);\n  }\n}\n\n/////////////////////////////////////////////////////////////////\n// APP ARCHITECTURE\n\nclass App {\n  #map;\n  #mapEvent;\n  #workouts = [];\n  #markers = [];\n  constructor() {\n    this._getPosition();\n\n    form.addEventListener('submit', this._newWorkout.bind(this));\n\n    inputType.addEventListener('change', this._toggleElevationField);\n\n    //listener for remove button and set in to view (click event)\n    containerWorkouts.addEventListener(\n      'click',\n      this._handleWorkoutClick.bind(this)\n    );\n\n    //listener for input changes (user edits) - change event\n    containerWorkouts.addEventListener(\n      'change',\n      this._updateWorkoutInfo.bind(this)\n    );\n\n    this._checkStorageAndLoad();\n\n    showSortBtns.addEventListener('click', this._toggleSortBtns.bind(this));\n\n    //sort event listener\n    sortContainer.addEventListener('click', this._sortAndRender.bind(this));\n\n    //clear workouts listeners\n    clearAllBtn.addEventListener('click', this._showDeleteMsg);\n\n    yesBtn.addEventListener('click', this._clearAll);\n\n    noBtn.addEventListener('click', function () {\n      confMsg.classList.add('msg__hidden');\n    });\n  }\n  _handleWorkoutClick(e) {\n    // find info about workout that was clicked\n    const [id, foundWorkout, workoutIndex, element] = this._getId(e);\n    // if no info, return\n    if (!id) return;\n\n    // 2. if remove__btn is clicked then remove item\n    if (e.target.classList.contains('remove__btn')) {\n      this._removeWorkout(element, workoutIndex);\n\n      // 4. update local storage\n      this._saveWorkouts();\n\n      return;\n    }\n    // 3. if an input field was clicked do nothing\n    if (e.target.classList.contains('workout__value')) {\n      return;\n    }\n\n    // 4. otherwise center item on map\n    this._setIntoView(foundWorkout);\n  }\n\n  _sortAndRender(e) {\n    const element = e.target.closest('.sort__button');\n    let currentDirection = 'descending'; //default\n    if (!element) return;\n    const arrow = element.querySelector('.arrow');\n    const type = element.dataset.type;\n\n    // set all arrows to default state (down)\n    sortContainer\n      .querySelectorAll('.arrow')\n      .forEach(e => e.classList.remove('arrow__up'));\n\n    // get which direction to sort\n    const typeValues = this.#workouts.map(workout => {\n      return workout[type];\n    });\n    const sortedAscending = typeValues\n      .slice()\n      .sort(function (a, b) {\n        return a - b;\n      })\n      .join('');\n    const sortedDescending = typeValues\n      .slice()\n      .sort(function (a, b) {\n        return b - a;\n      })\n      .join('');\n\n    // compare sortedAscending array with values from #workout array to check how are they sorted\n    // 1. case 1 ascending\n    if (typeValues.join('') === sortedAscending) {\n      currentDirection = 'ascending';\n\n      arrow.classList.add('arrow__up');\n    }\n    // 2. case 2 descending\n    if (typeValues.join('') === sortedDescending) {\n      currentDirection = 'descending';\n\n      arrow.classList.remove('arrow__up');\n    }\n\n    // sort main workouts array\n    this._sortArray(this.#workouts, currentDirection, type);\n\n    ///////// RE-RENDER ////////\n    // clear rendered workouts from DOM\n    containerWorkouts\n      .querySelectorAll('.workout')\n      .forEach(workout => workout.remove());\n    // clear workouts from map(to prevent bug in array order when deleting a single workout)\n    this.#markers.forEach(marker => marker.remove());\n    //clear array\n    this.#markers = [];\n    // render list all again sorted\n    this.#workouts.forEach(workout => {\n      this._renderWorkout(\n        workout,\n        model.getGeoCode(workout),\n        model.getWeatherData(workout)\n      );\n      // create new markers and render them on map\n      this._renderWorkoutMarker(workout);\n    });\n    // center map on the last item in array (this will be 1st workout on the list in the UI)\n    const lastWorkout = this.#workouts[this.#workouts.length - 1];\n    this._setIntoView(lastWorkout);\n  }\n  _sortArray(array, currentDirection, type) {\n    // sort opposite to the currentDirection\n    if (currentDirection === 'ascending') {\n      array.sort(function (a, b) {\n        return b[type] - a[type];\n      });\n    }\n    if (currentDirection === 'descending') {\n      array.sort(function (a, b) {\n        return a[type] - b[type];\n      });\n    }\n  }\n\n  _toggleSortBtns() {\n    sortContainer.classList.toggle('zero__height');\n  }\n  _showDeleteMsg() {\n    confMsg.classList.remove('msg__hidden');\n  }\n\n  _checkStorageAndLoad() {\n    const workouts = localStorage.getItem('workouts');\n    if (!workouts) return;\n\n    // Rebuild objects based on storage\n    const tempWorkouts = JSON.parse(workouts);\n    tempWorkouts.forEach(workout => {\n      const typeOfWorkout = workout.type;\n      let newWorkout;\n      // create workout object\n      if (typeOfWorkout === 'running') {\n        newWorkout = new Running(\n          workout.coords,\n          workout.distance,\n          workout.duration,\n          workout.date,\n          workout.cadence\n        );\n      }\n      if (typeOfWorkout === 'cycling') {\n        newWorkout = new Cycling(\n          workout.coords,\n          workout.distance,\n          workout.duration,\n          workout.date,\n          workout.elevationGain\n        );\n      }\n\n      //push the created workout object in the array\n      this.#workouts.push(newWorkout);\n    });\n    //Once all objects are created and stored in array #workouts\n    // render workouts in a list\n    this.#workouts.forEach(workout =>\n      this._renderWorkout(\n        workout,\n        model.getGeoCode(workout),\n        model.getWeatherData(workout)\n      )\n    );\n    // map markers will load after map is loaded\n  }\n  _saveWorkouts() {\n    const workoutString = JSON.stringify(this.#workouts);\n    window.localStorage.setItem('workouts', workoutString);\n  }\n\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n\n  _loadMap(position) {\n    const { latitude, longitude } = position.coords;\n    const myCoordinates = [latitude, longitude];\n\n    this.#map = L.map('map').setView(myCoordinates, 13);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n      // maxZoom: 20,\n      // subdomains:['mt0','mt1','mt2','mt3']\n    }).addTo(this.#map);\n\n    //show form when clicking on map\n    this.#map.on('click', this._showForm.bind(this));\n\n    // google tile\n    // http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\n    // original tile\n    // https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\n    if (!this.#workouts) return;\n    this.#workouts.forEach(workout => this._renderWorkoutMarker(workout));\n\n    // overview button listener\n    overviewBtn.addEventListener('click', this._overview.bind(this));\n  }\n\n  _showForm(mapE) {\n    //exporting mapevent to private variable so we can use it outside  event listener\n    this.#mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n  _clearInputFields() {\n    inputDistance.value =\n      inputDuration.value =\n      inputCadence.value =\n      inputElevation.value =\n        '';\n  }\n  _hideForm() {\n    this._clearInputFields();\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => {\n      form.style.display = 'grid';\n    }, 1000);\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    ///////// HELPER FUNCTIONS\n    // check if type is number\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n    // check if number is positive\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n    // function to display msg if inputs don't pass validation\n    const display = function () {\n      //display and hide msg after 3 sec\n      validationMsg.classList.add('msg__show');\n      setTimeout(() => {\n        validationMsg.classList.remove('msg__show');\n      }, 3000);\n      //clear fields\n      this._clearInputFields();\n    };\n    const displayValidationMsg = display.bind(this);\n\n    e.preventDefault();\n\n    // Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value; //converting to number with +\n    const duration = +inputDuration.value; //converting to number with +\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n    const date = Date.now(); // number in miliseconds. This way we can easily restore date object later(when it converts back from JSON upon storage load) and use its methods\n\n    // If workout is running create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n      // Check if data is valid\n      if (\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return displayValidationMsg();\n\n      workout = new Running([lat, lng], distance, duration, date, cadence);\n    }\n\n    // If workout is cycling create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n      // Check if data is valid\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return displayValidationMsg();\n\n      // create new workout object\n      workout = new Cycling([lat, lng], distance, duration, date, elevation);\n    }\n\n    this._renderWorkoutMarker(workout);\n\n    // Add workout object to workout array\n    this.#workouts.push(workout);\n\n    // Render workout\n    this._renderWorkout(\n      workout,\n      model.getGeoCode(workout),\n      model.getWeatherData(workout)\n    );\n\n    //hide form\n    this._hideForm();\n  }\n  _renderWorkoutMarker(workout) {\n    // custom icon\n    // const maptyIcon = L.icon({\n    //   iconUrl: 'icon.png',\n    //   iconSize: [50, 55],\n    //   iconAnchor: [24, 3],\n    // });\n    // create marker\n    const layer = L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup();\n\n    // put the marker inside markers array\n    this.#markers.push(layer);\n  }\n\n  async _renderWorkout(workout, geoData, weatherData) {\n    const geo = await geoData;\n    const weather = await weatherData;\n\n    let html = `\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n    <h2 class=\"workout__title\">${workout.description}${geo ? ',' : ''}\n    ${geo ?? ''} <img class=\"workout__weather\" src=\"${weather}\"/>\n    </h2>\n    <div class=\"workout__details\">\n          <span class=\"workout__icon\">${\n            workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n          }</span>\n          <input class=\"workout__value\" value=\"${\n            workout.distance\n          }\" data-type=\"distance\" required size=\"1\">\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⏱</span>\n          <input class=\"workout__value\" value=\"${\n            workout.duration\n          }\" data-type=\"duration\" required size=\"1\">\n          <span class=\"workout__unit\">min</span>\n        </div>`;\n\n    if (workout.type === 'running') {\n      html += ` \n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">⚡️</span>\n            <input class=\"workout__value\" value=\"${workout.pace.toFixed(\n              1\n            )}\" data-type=\"pace\" disabled required size=\"1\">\n            <span class=\"workout__unit\">min/km</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">🦶🏼</span>\n            <input class=\"workout__value\" value=\"${\n              workout.cadence\n            }\" data-type=\"cadence\" required size=\"1\">\n            <span class=\"workout__unit\">spm</span>\n          </div>\n          <button class=\"remove__btn\">×</button>\n        </li>`;\n    }\n\n    if (workout.type === 'cycling') {\n      html += `\n            <div class=\"workout__details\">\n            <span class=\"workout__icon\">⚡️</span>\n            <input class=\"workout__value\" value=\"${workout.speed.toFixed(\n              1\n            )}\" data-type=\"speed\" disabled required size=\"2\">\n            <span class=\"workout__unit\">km/h</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">⛰</span>\n            <input class=\"workout__value\" value=\"${\n              workout.elevationGain\n            }\" data-type=\"elevationGain\" required size=\"2\">\n            <span class=\"workout__unit\">m</span>\n          </div>\n          <button class=\"remove__btn\">×</button>\n        </li>`;\n    }\n\n    sortDivider.insertAdjacentHTML('afterend', html);\n    // save workouts in local storage\n    this._saveWorkouts();\n  }\n  _removeWorkout(element, workoutIndex) {\n    // 1. remove from list\n    element.remove();\n\n    // 2. remove from array\n    this.#workouts.splice(workoutIndex, 1);\n\n    // 3. remove from map\n    this.#markers[workoutIndex].remove();\n\n    // 4. remove from marker array\n    this.#markers.splice(workoutIndex, 1);\n  }\n  _clearAll() {\n    localStorage.clear();\n    location.reload();\n    confMsg.classList.add('msg__hidden');\n  }\n\n  _getId(e) {\n    // detect workout element on click\n    const element = e.target.closest('.workout');\n    if (element) {\n      // get info about the workout that was clicked on\n      const id = element.dataset.id;\n      const foundWorkout = this.#workouts.find(elem => elem.id === id);\n      const workoutIndex = this.#workouts.indexOf(foundWorkout);\n      return [id, foundWorkout, workoutIndex, element];\n    }\n    return [];\n  }\n  _updateWorkoutInfo(e) {\n    // find info about workout that was clicked\n    const [id, foundWorkout, _, element] = this._getId(e);\n    // if no info, return\n    if (!id) return;\n    // get type of input and value\n    const typeOfInput = e.target.dataset.type;\n    const newInputValue = +e.target.value;\n    let type;\n    // update workout object with the new value from the input field\n    foundWorkout[typeOfInput] = newInputValue;\n    // recalculate pace or speed\n    if (foundWorkout.type === 'running') {\n      foundWorkout.calcPace();\n      type = 'pace';\n    }\n    if (foundWorkout.type === 'cycling') {\n      foundWorkout.calcSpeed();\n      type = 'speed';\n    }\n\n    //update calculation in UI in the appropriate input field\n    element.querySelector(`input[data-type =\"${type}\"`).value =\n      foundWorkout[type].toFixed(1);\n    // save in local storage (update)\n    this._saveWorkouts();\n  }\n  _setIntoView(foundWorkout) {\n    this.#map.setView(foundWorkout.coords, 13);\n  }\n  _overview() {\n    // if there are no workouts return\n    if (this.#workouts.length === 0) return;\n\n    // find lowest and highest lat and long to make map bounds that fit all markers\n    const latitudes = this.#workouts.map(w => {\n      return w.coords[0];\n    });\n    const longitudes = this.#workouts.map(w => {\n      return w.coords[1];\n    });\n    const minLat = Math.min(...latitudes);\n    const maxLat = Math.max(...latitudes);\n    const minLong = Math.min(...longitudes);\n    const maxLong = Math.max(...longitudes);\n    // fit bounds with coordinates\n    this.#map.fitBounds(\n      [\n        [maxLat, minLong],\n        [minLat, maxLong],\n      ],\n      { padding: [70, 70] }\n    );\n  }\n}\n\nconst app = new App();\n\n// check validation message\n","import { AJAX } from './helper.js';\r\n\r\n// GET GEO CODE BY COORDINATES FROM GEOCODE.XYZ\r\nexport const getGeoCode = async function (workout) {\r\n  try {\r\n    const [lat, lng] = workout.coords;\r\n    const data = await AJAX(\r\n      `https://geocode.xyz/${lat},${lng}?geoit=json`,\r\n      'Please try to reload the page again. Unfortunately, this api what I am using now can not read all datas at once and I am not willing to pay for the API. Error occurs from this reason.'\r\n    );\r\n    // console.log(data.osmtags);\r\n    return data.osmtags.name;\r\n  } catch (err) {\r\n    console.error(err);\r\n    return '';\r\n  }\r\n};\r\n\r\n// GET WEATHER BY COORDINATES FROM OPEN WEATHER API\r\nexport const getWeatherData = async function (workout) {\r\n  try {\r\n    const myKey = '5c04291f0b2520cd23ea484f5b1e34e2';\r\n    const [lat, lng] = workout.coords;\r\n\r\n    const data = await AJAX(\r\n      `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${myKey}`,\r\n      'Failed to load data from API'\r\n    );\r\n\r\n    const { icon } = data.weather[0];\r\n\r\n    return `https://openweathermap.org/img/wn/${icon}@2x.png`;\r\n  } catch (err) {\r\n    console.error(err);\r\n    return '';\r\n  }\r\n};\r\n","export const AJAX = async function (url, errMsg) {\r\n  try {\r\n    const res = await fetch(url);\r\n    const data = await res.json();\r\n\r\n    if (!res.ok) throw new Error(errMsg);\r\n\r\n    return data;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n"],"names":["$ddb5346071cde49e$export$2b3ff41fecbef7c8","url","errMsg","res","fetch","data","json","ok","Error","err","$b5393ef87a412903$export$70bb7035b2fbdd40","workout","lat","lng","coords","osmtags","name","console","error","$b5393ef87a412903$export$ed33a38a78fb6b2b","icon","weather","$c1ce9d969bfa6909$var$form","document","querySelector","$c1ce9d969bfa6909$var$containerWorkouts","$c1ce9d969bfa6909$var$inputType","$c1ce9d969bfa6909$var$inputDistance","$c1ce9d969bfa6909$var$inputDuration","$c1ce9d969bfa6909$var$inputCadence","$c1ce9d969bfa6909$var$inputElevation","$c1ce9d969bfa6909$var$sortDivider","$c1ce9d969bfa6909$var$showSortBtns","$c1ce9d969bfa6909$var$validationMsg","$c1ce9d969bfa6909$var$clearAllBtn","$c1ce9d969bfa6909$var$overviewBtn","$c1ce9d969bfa6909$var$confMsg","$c1ce9d969bfa6909$var$yesBtn","$c1ce9d969bfa6909$var$noBtn","$c1ce9d969bfa6909$var$sortContainer","$c1ce9d969bfa6909$var$Workout","id","Math","random","constructor","distance","duration","date","_setDescription","Date","description","type","toUpperCase","slice","months","getMonth","getDate","getFullYear","$c1ce9d969bfa6909$var$Running","cadence","calcPace","pace","$c1ce9d969bfa6909$var$Cycling","elevationGain","calcSpeed","speed","map","mapEvent","workouts","markers","_getPosition","addEventListener","_newWorkout","bind","_toggleElevationField","_handleWorkoutClick","_updateWorkoutInfo","_checkStorageAndLoad","_toggleSortBtns","_sortAndRender","_showDeleteMsg","_clearAll","classList","add","e","foundWorkout","workoutIndex","element","_getId","target","contains","_removeWorkout","_saveWorkouts","_setIntoView","closest","currentDirection","arrow","dataset","querySelectorAll","forEach","remove","typeValues","sortedAscending","sort","a","b","join","sortedDescending","_sortArray","marker","_renderWorkout","_renderWorkoutMarker","lastWorkout","length","array","toggle","localStorage","getItem","tempWorkouts","JSON","parse","newWorkout","typeOfWorkout","push","workoutString","stringify","window","setItem","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","myCoordinates","L","setView","tileLayer","attribution","addTo","on","_showForm","_overview","mapE","focus","_clearInputFields","value","_hideForm","style","display","setTimeout","validInputs","inputs","every","inp","Number","isFinite","allPositive","displayValidationMsg","preventDefault","latlng","now","elevation","layer","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","geoData","weatherData","geo","html","toFixed","insertAdjacentHTML","splice","clear","location","reload","find","elem","indexOf","_","typeOfInput","newInputValue","latitudes","w","longitudes","minLat","min","maxLat","max","minLong","maxLong","fitBounds","padding"],"version":3,"file":"index.18ad774a.js.map"}