{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["\"use strict\";\nconst form = document.querySelector(\".form\");\nconst containerWorkouts = document.querySelector(\".workouts\");\nconst inputType = document.querySelector(\".form__input--type\");\nconst inputDistance = document.querySelector(\".form__input--distance\");\nconst inputDuration = document.querySelector(\".form__input--duration\");\nconst inputCadence = document.querySelector(\".form__input--cadence\");\nconst inputElevation = document.querySelector(\".form__input--elevation\");\n//let map, mapEvent;\nclass Workout {\n    date = new Date();\n    id = (Date.now() + \"\").slice(-10);\n    clicks = 0;\n    constructor(coords, distance, duration){\n        this.coords = coords; //[lat,lng]\n        this.distance = distance; //in km\n        this.duration = duration; //in min\n    }\n    _setDescription() {\n        // prettier-ignore\n        const months = [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\"\n        ];\n        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]} ${this.date.getDate()}`;\n    }\n    click() {\n        this.clicks++;\n    }\n}\nclass Running extends Workout {\n    type = \"running\";\n    constructor(coords, distance, duration, cadence){\n        super(coords, distance, duration);\n        this.cadence = cadence;\n        //this.type='cycling'\n        this.calcPace();\n        this._setDescription();\n    }\n    calcPace() {\n        //min/km\n        this.pace = this.duration / this.distance;\n        return this.pace;\n    }\n}\nclass Cycling extends Workout {\n    type = \"cycling\";\n    constructor(coords, distance, duration, elevation){\n        super(coords, distance, duration);\n        this.elevation = elevation;\n        this.calcSpeed();\n        this._setDescription();\n    }\n    calcSpeed() {\n        //km/h\n        this.speed = this.distance / (this.duration / 60);\n        return this.speed;\n    }\n}\n// const run1 = new Running([39, -12], 5.2, 24, 178);\n// const cyl1 = new Cycling([39, -12], 27, 95, 523);\n// console.log(run1, cyl1);\n////////////////////////////////////////////////\n//application architecture\nclass App {\n    #map;\n    #mapZoomLevel = 13;\n    #mapEvent;\n    #workouts = [];\n    constructor(){\n        //get user's position\n        this._getPosition();\n        //get data from local storage\n        this._getLocalStorage();\n        //attach event handlers\n        form.addEventListener(\"submit\", this._newWorkout.bind(this));\n        inputType.addEventListener(\"change\", this._toggleElevationField);\n        containerWorkouts.addEventListener(\"click\", this._moveToPopup.bind(this));\n    }\n    _getPosition() {\n        if (navigator.geolocation) navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), function() {\n            alert(\"Could not get your position\");\n        });\n    }\n    _loadMap(position) {\n        // current position\n        //console.log(position);\n        const { latitude } = position.coords;\n        const { longitude } = position.coords;\n        // console.log(latitude, longitude);\n        const coords = [\n            latitude,\n            longitude\n        ];\n        this.#map = L.map(\"map\").setView(coords, 13);\n        //console.log(map);\n        L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(this.#map);\n        //handling clicks on map\n        this.#map.on(\"click\", this._showForm.bind(this));\n        this.#workouts.forEach((work)=>{\n            // this._renderWorkout(work);\n            this._renderWorkoutMarker(work);\n        });\n    }\n    _showForm(mapE) {\n        this.#mapEvent = mapE;\n        form.classList.remove(\"hidden\");\n        inputDistance.focus();\n    }\n    _hideForm() {\n        //empty inputs\n        inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value = \"\";\n        form.style.display = \"none\";\n        form.classList.add(\"hidden\");\n        setTimeout(()=>form.style.display = \"grid\", 1000);\n    }\n    _toggleElevationField() {\n        inputElevation.closest(\".form__row\").classList.toggle(\"form__row--hidden\");\n        inputCadence.closest(\".form__row\").classList.toggle(\"form__row--hidden\");\n    }\n    _newWorkout(e) {\n        const validInputs = (...inputs)=>inputs.every((inp)=>Number.isFinite(inp));\n        const allPositive = (...inputs)=>inputs.every((inp)=>inp > 0);\n        e.preventDefault();\n        //Get data from form\n        const type = inputType.value;\n        const distance = +inputDistance.value;\n        const duration = +inputDuration.value;\n        const { lat, lng } = this.#mapEvent.latlng;\n        let workout;\n        //if workout running,create running object\n        if (type === \"running\") {\n            const cadence = +inputCadence.value;\n            //check if data is valid\n            if (// !Number.isFinite(distance) ||\n            // !Number.isFinite(duration) ||\n            // !Number.isFinite(cadence)\n            !validInputs(distance, duration, cadence) || !allPositive(distance, duration, cadence)) return alert(\"Wrong Input\");\n            workout = new Running([\n                lat,\n                lng\n            ], distance, duration, cadence);\n        }\n        //if workout is cycling ,create cycling object\n        if (type === \"cycling\") {\n            const elevation = +inputElevation.value;\n            if (!validInputs(distance, duration, elevation) || !allPositive(distance, duration)) return alert(\"Input have to be positive number!\");\n            workout = new Cycling([\n                lat,\n                lng\n            ], distance, duration, elevation);\n        }\n        //add new object to workout array\n        this.#workouts.push(workout);\n        console.log(workout);\n        //Render workout on map as marker\n        //display marker\n        this._renderWorkoutMarker(workout);\n        //render the workout on the list\n        this._renderWorkout(workout);\n        //hide form + clear input fields\n        this._hideForm();\n        //set local storage to all workouts\n        this._setLocalStorage();\n    }\n    _renderWorkoutMarker(workout) {\n        L.marker(workout.coords).addTo(this.#map).bindPopup(L.popup({\n            maxWidth: 250,\n            minWidth: 250,\n            autoClose: false,\n            closeOnClick: false,\n            className: `${workout.type}-popup`\n        })).setPopupContent(`${workout.type === \"running\" ? \"\\uD83C\\uDFC3‍♂️\" : \"\\uD83D\\uDEB4‍♀️\"} ${workout.description}`).openPopup();\n    }\n    _renderWorkout(workout) {\n        let html = `\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n      <h2 class=\"workout__title\">${workout.description}</h2>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">${workout.type === \"running\" ? \"\\uD83C\\uDFC3‍♂️\" : \"\\uD83D\\uDEB4‍♀️\"}</span>\n        <span class=\"workout__value\">${workout.distance}</span>\n        <span class=\"workout__unit\">km</span>\n      </div>\n      <div class=\"workout__details\">\n       <span class=\"workout__icon\">⏱</span>\n       <span class=\"workout__value\">${workout.duration}</span>\n       <span class=\"workout__unit\">min</span>\n      </div>`;\n        if (workout.type === \"running\") html += `\n       <div class=\"workout__details\">\n         <span class=\"workout__icon\">⚡️</span>\n         <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n         <span class=\"workout__unit\">min/km</span>\n       </div>\n       <div class=\"workout__details\">\n         <span class=\"workout__icon\">🦶🏼</span>\n         <span class=\"workout__value\">${workout.cadence}</span>\n         <span class=\"workout__unit\">spm</span>\n       </div>\n     </li>`;\n        if (workout.type === \"cycling\") html += `\n      <div class=\"workout__details\">\n      <span class=\"workout__icon\">⚡️</span>\n      <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n      <span class=\"workout__unit\">km/h</span>\n    </div>\n    <div class=\"workout__details\">\n      <span class=\"workout__icon\">⛰</span>\n      <span class=\"workout__value\">${workout.elevation}</span>\n      <span class=\"workout__unit\">m</span>\n    </div>\n  </li>`;\n        form.insertAdjacentHTML(\"afterend\", html);\n    }\n    _moveToPopup(e) {\n        const workoutEl = e.target.closest(\".workout\");\n        // console.log(workoutEl);\n        if (!workoutEl) return;\n        const workout = this.#workouts.find((work)=>work.id === workoutEl.dataset.id);\n        // console.log(workout);\n        this.#map.setView(workout.coords, this.#mapZoomLevel, {\n            animate: true,\n            pan: {\n                duration: 1\n            }\n        });\n    //using public interfeace\n    //due to problem in local storage we are disableing it\n    // workout.click();\n    // console.log(workout.clicks);\n    }\n    _setLocalStorage() {\n        localStorage.setItem(\"workouts\", JSON.stringify(this.#workouts));\n    }\n    _getLocalStorage() {\n        const data = JSON.parse(localStorage.getItem(\"workouts\"));\n        //console.log(data);\n        if (!data) return;\n        this.#workouts = data;\n        this.#workouts.forEach((work)=>{\n            this._renderWorkout(work);\n        // this._renderWorkoutMarker(work)\n        });\n    }\n    reset() {\n        localStorage.removeItem(\"workouts\");\n        location.reload();\n    }\n}\nconst app = new App(); //app._getPosition();\n //console.log(app);\n\n//# sourceMappingURL=index.72fd389c.js.map\n","'use strict';\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\n//let map, mapEvent;\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  clicks = 0;\n\n  constructor(coords, distance, duration) {\n    this.coords = coords; //[lat,lng]\n    this.distance = distance; //in km\n    this.duration = duration; //in min\n  }\n\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n\n  click() {\n    this.clicks++;\n  }\n}\nclass Running extends Workout {\n  type = 'running';\n\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    //this.type='cycling'\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    //min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n\n  constructor(coords, distance, duration, elevation) {\n    super(coords, distance, duration);\n    this.elevation = elevation;\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    //km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n// const run1 = new Running([39, -12], 5.2, 24, 178);\n// const cyl1 = new Cycling([39, -12], 27, 95, 523);\n// console.log(run1, cyl1);\n\n////////////////////////////////////////////////\n//application architecture\nclass App {\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n\n  constructor() {\n    //get user's position\n    this._getPosition();\n\n    //get data from local storage\n    this._getLocalStorage();\n\n    //attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n\n    inputType.addEventListener('change', this._toggleElevationField);\n\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n\n  _loadMap(position) {\n    // current position\n    //console.log(position);\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n    // console.log(latitude, longitude);\n\n    const coords = [latitude, longitude];\n\n    this.#map = L.map('map').setView(coords, 13);\n    //console.log(map);\n\n    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    //handling clicks on map\n    this.#map.on('click', this._showForm.bind(this));\n\n    this.#workouts.forEach(work => {\n      // this._renderWorkout(work);\n      this._renderWorkoutMarker(work);\n    });\n  }\n\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    //empty inputs\n    inputDistance.value =\n      inputDuration.value =\n      inputCadence.value =\n      inputElevation.value =\n        '';\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n\n    //Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n\n    //if workout running,create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n      //check if data is valid\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Wrong Input');\n\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    //if workout is cycling ,create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Input have to be positive number!');\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n\n    //add new object to workout array\n    this.#workouts.push(workout);\n    console.log(workout);\n\n    //Render workout on map as marker\n    //display marker\n    this._renderWorkoutMarker(workout);\n\n    //render the workout on the list\n    this._renderWorkout(workout);\n\n    //hide form + clear input fields\n    this._hideForm();\n\n    //set local storage to all workouts\n    this._setLocalStorage();\n  }\n\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 250,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup();\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n      <h2 class=\"workout__title\">${workout.description}</h2>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">${\n          workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n        }</span>\n        <span class=\"workout__value\">${workout.distance}</span>\n        <span class=\"workout__unit\">km</span>\n      </div>\n      <div class=\"workout__details\">\n       <span class=\"workout__icon\">⏱</span>\n       <span class=\"workout__value\">${workout.duration}</span>\n       <span class=\"workout__unit\">min</span>\n      </div>`;\n\n    if (workout.type === 'running')\n      html += `\n       <div class=\"workout__details\">\n         <span class=\"workout__icon\">⚡️</span>\n         <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n         <span class=\"workout__unit\">min/km</span>\n       </div>\n       <div class=\"workout__details\">\n         <span class=\"workout__icon\">🦶🏼</span>\n         <span class=\"workout__value\">${workout.cadence}</span>\n         <span class=\"workout__unit\">spm</span>\n       </div>\n     </li>`;\n\n    if (workout.type === 'cycling')\n      html += `\n      <div class=\"workout__details\">\n      <span class=\"workout__icon\">⚡️</span>\n      <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n      <span class=\"workout__unit\">km/h</span>\n    </div>\n    <div class=\"workout__details\">\n      <span class=\"workout__icon\">⛰</span>\n      <span class=\"workout__value\">${workout.elevation}</span>\n      <span class=\"workout__unit\">m</span>\n    </div>\n  </li>`;\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    const workoutEl = e.target.closest('.workout');\n    // console.log(workoutEl);\n\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n    // console.log(workout);\n\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n    //using public interfeace\n    //due to problem in local storage we are disableing it\n    // workout.click();\n    // console.log(workout.clicks);\n  }\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n    //console.log(data);\n\n    if (!data) return;\n\n    this.#workouts = data;\n\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n      // this._renderWorkoutMarker(work)\n    });\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n//app._getPosition();\n//console.log(app);\n"],"names":["form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","Workout","date","Date","id","now","slice","clicks","constructor","coords","distance","duration","_setDescription","description","type","toUpperCase","months","getMonth","getDate","click","Running","cadence","calcPace","pace","Cycling","elevation","calcSpeed","speed","map","mapZoomLevel","mapEvent","workouts","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","closest","toggle","e","workout","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","lat","lng","latlng","push","console","log","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","reset","removeItem","location","reload"],"version":3,"file":"index.72fd389c.js.map"}